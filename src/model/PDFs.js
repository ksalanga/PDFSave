import { openDB, ClientDB } from './DB'
import { add as addToDeleteStore } from './Deletes'
import uniqid from 'uniqid'

var id = uniqid()

/** 
 * PDFs Object Store for the Client Database
 * 
 * description:
 * holds records for all pdfs that are opened through a Chrome based browser.
 * 
 * pdf record in Object Store keys:
 * - primary_key (num) - indexedDB auto generated key.
 * - name (string) - title of the pdf that user can decide.
 * - file_path (string) - absolute file path of the pdf from the chrome url.
 * - current_page (num) - current page that the user is reading or left off at.
 * - length (num) - the length in pages of the pdf.
 * - last_week_latest_page (num) [DEFAULT: 0] - the latest page that the user read last week for reading progress notification purposes.
 * - current_week_latest_page (num) [DEFAULT: 0] - the latest page that the user is currently reading this week for reading progress notification purposes.
 * - bookmarks (list(Bookmark)) - list of bookmark objects (see Bookmark Object keys below).
 * - auto_save_on (boolean) - indicates if this pdf has auto saving on or not.
 * - progress_notification_on (boolean) - turns on reading progress notification for this specific pdf.
 * 
 * !NOTE! Bookmark objects are not their own separate object store that has a many to one relationship with a pdf object store.
 * !NOTE! Their implementation and keys are simple enough that...
 * !NOTE! we can just store them as a list of objects with their own separate ids within pdfs object stores.
 * 
 * Bookmark Object keys:
 * - id (string) - id generated by application.
 * - name (string) - name of bookmark.
 * - page (num) - page that the bookmark of the pdf represents.
 * 
 * Indexes:
 * file_name
 * **/


export var dummyPDF =  
{
    name: `pdf${id}`,
    file_path: `/pdf/pdf${id}.pdf`,
    current_page: 0,
    length: 100,
    last_week_latest_page: 0,
    current_week_latest_page: 0,
    bookmarks: [
        {
            id: '1',
            name: 'Bookmark 1',
            page: 1
        },
    ],
    auto_save_on: true,
    progress_notification_on: false,
}

// TODO (Kenny): Delete dummy PDF array later
export var dummyPDFs = [
    {
        name: 'PDF 1',
        file_path: '/pdf/pdf1.pdf',
        current_page: 24,
        length: 50,
        last_week_latest_page: 0,
        current_week_latest_page: 10,
        bookmarks: [
            {
                id: '1',
                name: 'Bookmark 1',
                page: 1
            },
            {
                id: '2',
                name: 'Bookmark 2',
                page: 2
            },
            {
                id: '3',
                name: 'Bookmark 3',
                page: 3
            },
            {
                id: '4',
                name: 'Bookmark 4',
                page: 4
            },
            {
                id: '5',
                name: 'Bookmark 5',
                page: 5
            },
        ],
        auto_save_on: true,
        progress_notification_on: false
    },
    {
        name: 'PDF 2',
        file_path: '/pdf/pdf2.pdf',
        current_page: 37,
        length: 700,
        last_week_latest_page: 0,
        current_week_latest_page: 0,
        bookmarks: [
            {
                id: '1',
                name: 'Bookmark 1',
                page: 1
            },
            {
                id: '2',
                name: 'Bookmark 2',
                page: 2
            }
        ],
        auto_save_on: true,
        progress_notification_on: false
    },
    {
        name: 'PDF 3',
        file_path: '/pdf/pdf3.pdf',
        current_page: 400,
        length: 1000,
        last_week_latest_page: 120,
        current_week_latest_page: 300,
        bookmarks: [
            {
                id: '1',
                name: 'Bookmark 1',
                page: 1
            }
        ],
        auto_save_on: true,
        progress_notification_on: true
    }
]

export async function getWithKey(key) {
    try {
        const db = await openDB()
        return await db.get(ClientDB.pdfStore, key)    
    } catch (error) {
        console.log(`Something went wrong getting PDF ${key}`)
    }
}

export async function getWithFile(file_path) {
    try {
        const db = await openDB()
        return await db.getFromIndex(ClientDB.pdfStore, 'file_path', file_path)
    } catch (error) {
        console.log(`Something went wrong getting PDF in ${file_path}`)
    }
}

// add a PDF to pdfs Object Store
export async function add(pdf) {
    try {
        const db = await openDB()
        const pdfStore = db.transaction(ClientDB.pdfStore, 'readwrite').store

        await pdfStore.add(pdf)
    } catch (error) {
        console.log("Something went wrong adding a PDF", error)
    }
}

// grab a list of PDFs
export async function list() {
    try {
        const db = await openDB()
        const pdfs = []

        let cursor = await db.transaction(ClientDB.pdfStore).store.openCursor()

        while (cursor) {
            pdfs.push({key: cursor.key, ...cursor.value})
            cursor = await cursor.continue()
        }

        return pdfs
    } catch (error) {
        console.log("Something went wrong reading PDFs", error)
    }
}

export async function update(key, values) {
    try {
        const db = await openDB()
        const pdfStore = db.transaction(ClientDB.pdfStore, 'readwrite').store
        const pdf = await pdfStore.get(key)
    
        const valueKeys = Object.keys(values)
    
        valueKeys.forEach((key) => {
            pdf[key] = values[key]
        })

        await pdfStore.put(pdf, key)

        console.log('successfully updated pdf', key)
    } catch (error) {
        console.log("Something went wrong updating PDF", error)
    }
}

export async function remove(key) {
    try {
        const db = await openDB()
        const tx = db.transaction([ClientDB.pdfStore, ClientDB.deleteStore], 'readwrite')

        const pdfStore = tx.objectStore(ClientDB.pdfStore)
        const deleteStore = tx.objectStore(ClientDB.deleteStore)

        // first add pdf's file to delete store
        const pdf = await pdfStore.get(key)
        await addToDeleteStore(pdf.file_path, deleteStore)

        await pdfStore.delete(key)
    } catch (error) {
        console.log("Something went wrong deleting PDF", error)
    }
}